@page "/orallarAllRaportBar-chart"
@inject HttpClient Http
@using MudBlazor
@using ReportBuilderAPI.Client.Components.Models
@using ApexCharts

<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12" md="4">
                <MudDatePicker Label="Başlangıç Tarihi" @bind-Date="startDate" Format="yyyy-MM-dd" PickerVariant="PickerVariant.Dialog"></MudDatePicker>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudDatePicker Label="Bitiş Tarihi" @bind-Date="endDate" Format="yyyy-MM-dd" PickerVariant="PickerVariant.Dialog"></MudDatePicker>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudButton OnClick="GetHarmanlamaData" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Verileri Getir</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>
<MudCard>
    <!-- ApexChart with Data -->
    <MudCardContent>
        <ApexChart @ref="chart" TItem="HarmanlamaDto" Title="Harmanlama Verileri" Height="450">
            <ApexPointSeries TItem="HarmanlamaDto"
                             Items="chartData"
                             Name="Alınan"
                             XValue="@(e => e.ReceteAdi)"
                             YAggregate="@(e => e.Sum(e=>e.Alinan))"
                             SeriesType="SeriesType.Bar"
                             DataPointMutator="SetGoals"
                             Color="#E51C15" />
        </ApexChart>
    </MudCardContent>
</MudCard>

@* <!-- Table for Data Display -->
<MudTable Items="@harmanlamaList" Dense>
    <HeaderContent>
        <MudTh>Adı</MudTh>
        <MudTh>Alinacak</MudTh>
        <MudTh>Alinan</MudTh>
    </HeaderContent>
    <RowTemplate Context="item">
        <MudTd>@item.ReceteAdi</MudTd>
        <MudTd>@item.Alinacak</MudTd>
        <MudTd>@item.Alinan</MudTd>
    </RowTemplate>
</MudTable> *@

@code {
    private DateTime? startDate;
    private DateTime? endDate;
    private List<HarmanlamaDto> harmanlamaList = new();
    private List<HarmanlamaDto> chartData = new();

    private ApexChart<HarmanlamaDto> chart = new();

    private async Task GetHarmanlamaData()
    {
        if (startDate == null || endDate == null)
        {
            return;
        }

        try
        {
            string url = $"http://localhost:5198/api/Harmanlama/GetByDate?startDate={startDate:O}&endDate={endDate:O}";
            Console.WriteLine($"API çağrısı: {url}");

            var response = await Http.GetAsync(url);

            if (response.IsSuccessStatusCode)
            {
                harmanlamaList = await response.Content.ReadFromJsonAsync<List<HarmanlamaDto>>() ?? new();
                chartData = harmanlamaList; // Filtreleme API tarafından yapıldığı için, veriyi direkt olarak alıyoruz.

                StateHasChanged(); // Grafiği güncelle

                await chart.UpdateSeriesAsync();
            }
            else
            {
                Console.WriteLine($"API başarısız: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hata oluştu: {ex.Message}");
        }
    }
    private void SetGoals(DataPoint<HarmanlamaDto> datapoint)
    {
        datapoint.Goals = new();
        var goal = new DataPointGoal { Name = "Alınacak" };
        datapoint.Goals.Add(goal);

        // Aynı reçete adına sahip olan tüm öğelerin "Alinacak" değerlerinin toplamını al
        var totalAlinacak = chartData
            .Where(data => string.Equals(data.ReceteAdi, datapoint.X as string, StringComparison.OrdinalIgnoreCase))
            .Sum(data => data.Alinacak ?? 0);

        goal.StrokeColor = "#145A32"; // Yeşil renk
        goal.StrokeHeight = 3;  // Çizginin kalınlığı
        goal.StrokeLineCap = LineCap.Round; // Çizginin uçları yuvarlatılmış olacak
        goal.Value = totalAlinacak; // Toplam "Alinacak" değeri atanıyor
    }


}
